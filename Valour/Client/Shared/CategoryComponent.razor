@using Valour.Shared.Categories
@inject ClientPlanetManager planetManager
@inject ClientWindowManager windowManager
@inject ClientCategoryManager categoryManager


<div class="@Chosen_CSS" id="@category.Id">
    <img class="arrow" src="media/Category-Icon.svg" @onclick='@OnClick' style="@ArrowStyle">
    <p class="name">
        @category.Name
    </p>
    <p class="add-channel-button" id="@category.Id" onclick="AddChannelCategoryContextMenu(event, this)">
        +
    </p>
    <!-- The Modal -->
    <div class="modal channelmodel" id="@category.Id">
        <!-- Modal content -->
        <div class="modal-content-CreateChannel">
            <div class="login-box">
                <div class="col-md-12">
                    <CreateChannelComponent Category="@category"></CreateChannelComponent>   
                </div>
            </div>
        </div>
    </div>
    <div class="modal categorymodel" id="@category.Id">
        <!-- Modal content -->
        <div class="modal-content-CreateChannel">
            <div class="login-box">
                <div class="col-md-12">
                    <CreateCategoryComponent Category="@category"></CreateCategoryComponent>
                </div>
            </div>
        </div>
    </div>
    @if (IsOpen) {
        <div class="channel-list">
            @foreach(ClientPlanetChatChannel channel in PlanetChannelList) {
                if (channel.Parent_Id == null && category.Name == "General") {
                    if (channel.Id == channelWindow.Channel.Id) {
                        <ChannelListComponent Channel="@channel" Open="true"></ChannelListComponent>
                    }
                    else
                    {
                        <ChannelListComponent Channel="@channel" Open="false"></ChannelListComponent>
                    }
                }
                if (channel.Parent_Id == category.Id) {
                    if (channel.Id == channelWindow.Channel.Id) {
                        <ChannelListComponent Channel="@channel" Open="true"></ChannelListComponent>
                    }
                    else
                    {
                        <ChannelListComponent Channel="@channel" Open="false"></ChannelListComponent>
                    }
                }
            }
            @foreach(PlanetCategory planetcategory in PlanetCategoryChannelList)
            {
                @if (planetcategory.Parent_Id == category.Id) {
                    <CategoryComponent PlanetCategoryChannelList="@PlanetCategoryChannelList" Category="@planetcategory" channelWindow="@channelWindow" planet="@planet" PlanetChannelList="@PlanetChannelList">
                    </CategoryComponent>
                }
            }
        </div>
    }
</div>
@code {
    [Parameter]
    public PlanetCategory category { get; set; }

    [Parameter]
    public ConcurrentBag<ClientPlanetChatChannel> PlanetChannelList { get; set; }

    [Parameter]
    public ConcurrentBag<PlanetCategory> PlanetCategoryChannelList { get; set; }

    [Parameter]
    public ChatChannelWindow channelWindow { get; set; }

    [Parameter]
    public Planet planet { get; set; }

    public bool IsOpen { get; set; }

    protected override Task OnInitializedAsync()
    {
        IsOpen = categoryManager.IsOpen(category);

        return base.OnInitializedAsync();
    }

    public string ArrowStyle
    {
        get
        {
            if (IsOpen) {
                return "transform: rotate(90deg);";
            }
            else {
                return "";
            }
        }
    }

    public string Chosen_CSS
    {
        get
        {
            if (IsOpen)
            {
                return "category is-open";
            }
            else
            {
                return "category";
            }
        }
    }

    [Parameter]
    public RenderFragment ChildContent { get; set; }
    public void OnClick()
    {
        IsOpen = !IsOpen;

        categoryManager.SetOpen(category, IsOpen);

        StateHasChanged();
    }
}

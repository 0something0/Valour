@inject HttpClient Http
@inject NavigationManager navManager
@inject IJSRuntime JS
@inject ClientPlanetManager planetManager
@inject ClientWindowManager windowManager

<div class="d-flex flex-column window" style="height:100%; max-width:100%;" id="window" @onclick="@OnClickWindow">

    <div id="innerwindow-@Window.Index" class="p-2 mt-auto" style="overflow-y: scroll;">
        @if (Window.messages != null)
        {
            foreach (ClientPlanetMessage msg in Window.messages)
            {
                <MessageComponent Message="msg"></MessageComponent>
            }
        }
    </div>

    <div class="ml-1">
        <center>
            <textarea id="text-input" class="textbox" rows="2" @bind-value="@currentInput" @bind-value:event="oninput" @onkeypress="OnChatboxKeypress" @onpaste="OnChatboxInput">@currentInput</textarea>
        </center>
    </div>
</div>

@code{

    /// <summary>
    /// True if the client has negotiated a channel connection
    /// </summary>
    private bool channelConnected;

    /// <summary>
    /// The input currently within the chatbox, this is bound and any changes will
    /// be reflected within the box.
    /// </summary>
    private string currentInput;

    private HubConnection hubConnection;

    [Parameter]
    public ChatChannelWindow Window { get; set; }

    public ClientPlanetChatChannel Channel;

    // Runs when page is initialized
    protected override async Task OnInitializedAsync()
    {
        Channel = Window.Channel;

        Window.messages = new List<ClientPlanetMessage>();

        Window.RefreshWindowState += SetStateChanged;

        await planetManager.SetCurrentPlanet(await Channel.GetPlanetAsync());

        await ConnectSignalR();

        await JS.InvokeVoidAsync("OnChannelLoad", null);

        await JS.InvokeVoidAsync("SetupWindow", Window.Index);

        windowManager.OnWindowChannelChange += OnWindowChannelChange;

        // Request messages from server
        Window.messages.AddRange(await Channel.GetLastMessagesAsync(20));

        if (Window.messages.Count > 0)
        {
            Window.firstMessageIndex = Window.messages[0].Message_Index;
        }
    }

    public async Task OnWindowChannelChange()
    {
        if (Channel != Window.Channel){
            await hubConnection.SendAsync("LeaveChannel", Channel.Id);
            Channel = Window.Channel;
            await hubConnection.SendAsync("JoinChannel", Channel.Id);
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task ConnectSignalR()
    {
        // Get url for
        string conUrl = navManager.BaseUri.TrimEnd('/') + "/messagehub";

        hubConnection = new HubConnectionBuilder()
            .WithUrl(conUrl)
            .Build();

        await hubConnection.StartAsync();

        // Connect to channel
        await hubConnection.SendAsync("JoinChannel", Channel.Id);

        hubConnection.On<string>("Relay", RecieveMessage);
    }

    public async Task RecieveMessage(string data)
    {

        ClientPlanetMessage message = Newtonsoft.Json.JsonConvert.DeserializeObject<ClientPlanetMessage>(data);

        Console.WriteLine($"Recieved message {message.Message_Index}.");

        //Console.WriteLine(data);

        //Console.WriteLine(await message.GetAuthorAsync());

        //await JS.InvokeVoidAsync("AddMessage", Window.Index);

        Window.messages.Add(message);

        Window.messageIndex = message.Message_Index;

        Console.WriteLine("Added message.");

        // Flag for UI refresh
        StateHasChanged();

        await JS.InvokeVoidAsync("ScrollWindowBottom", Window.Index);
    }

    public async Task SetStateChanged()
    {
        StateHasChanged();
    }

    /// <summary>
    /// This runs every time a key is pressed when the chatbox is selected
    /// </summary>
    public async Task OnChatboxKeypress(KeyboardEventArgs args)
    {
        // Debug for key presses
        // Console.WriteLine(currentInput);

        if (args.Key == "Enter" && !args.ShiftKey)
        {
            // Grab current input
            string msg = currentInput;

            Console.WriteLine(currentInput);

            string temp = msg;

            temp = temp.TrimEnd('\n');

            currentInput = "";

            if (temp != "")
            {
                // Post message to server
                StateHasChanged();
                await PostMessage(msg);
                currentInput = currentInput.TrimStart('\n'); // Fix odd bug
            }
        }
    }

    public async Task OnChatboxInput()
    {

    }

    public async Task OnClickWindow()
    {
        ClientPlanet planet = await ClientPlanetCache.GetPlanetAsync(Channel.Planet_Id);
        await planetManager.SetCurrentPlanet(planet);
    }

    public async Task PostMessage(string msg)
    {
        PlanetMessage message = new PlanetMessage()
        {
            Channel_Id = Channel.Id,
            Content = msg,
            TimeSent = DateTime.UtcNow,
            Author_Id = ClientUserManager.User.Id,
            Planet_Id = Channel.Planet_Id
        };

        string json = Newtonsoft.Json.JsonConvert.SerializeObject(message);

        Console.WriteLine("SEND: \n" + json);

        HttpResponseMessage httpresponse = await Http.PostAsJsonAsync<PlanetMessage>($"Channel/PostMessage", message);

        TaskResult<ulong> response = Newtonsoft.Json.JsonConvert.DeserializeObject<TaskResult<ulong>>(await httpresponse.Content.ReadAsStringAsync());

        Console.WriteLine(response.ToString());
    }

    [JSInvokable("OnScrollTopInvoke")]
    public static async Task OnScrollTop(int index)
    {
        ChatChannelWindow Window = ClientWindowManager.Instance.GetWindow(index) as ChatChannelWindow;

        if (Window == null)
        {
            Console.WriteLine("Channel window is null in OnScrollTop!");
            return;
        }

        Console.WriteLine($"Fetching older messages from index {Window.firstMessageIndex} for window {Window.Index}");

        var messages = await Window.Channel.GetMessagesAsync(Window.firstMessageIndex, 10);

        if (messages == null || messages.Count() == 0)
        {
            return;
        }

        Window.messages.InsertRange(0, messages);
        Window.firstMessageIndex = messages.ElementAt(0).Message_Index;

        if (Window.RefreshWindowState != null)
        {
            await Window.RefreshWindowState.Invoke();
        }
    }
}
@page "/"

@using Valour.Shared
@inject HttpClient Http
@inject NavigationManager navManager
@using Microsoft.AspNetCore.SignalR.Client;
@inject IJSRuntime JS
@inject ClientPlanetManager planetManager

<!-- Check login status -->
@if (ClientUserManager.IsLoggedIn())
{
    <link href="https://fonts.googleapis.com/css2?family=Ubuntu:ital,wght@0,300;0,400;0,500;0,700;1,300;1,400;1,500;1,700&display=swap" rel="stylesheet">
    <body style="height: 100%">
        <div class="mainrow">
            <div class="sidebar" id="sidebar1">

                <div style="width: 250px">
                    <img class="valour-logo" src="icon-512.png">

                    <div style="display:inline-block; vertical-align: middle">
                        <p class="valour-name">
                            Valour
                        </p>
                        <p class="valour-version">
                            Valour Platform Version 0.0.1 Pre-Alpha
                        </p>
                    </div>
                </div>

                @if (planetManager.GetCurrent() != null)
                {

                    foreach (var user in planetUserList)
                    {
                        <RoleComponent Name="Emperor"></RoleComponent>
                        <UserComponent Only="true" User="@user"></UserComponent>
                    }
                }
            </div>
            <div class="sidebar-2" id="sidebar2">
                <CurrentChannelComponent Name="General" Description="General chat for legitimate conversations"></CurrentChannelComponent>
                <div class="top-bar">
                </div>
                <UserInfoComponent User="@ClientUserManager.User"></UserInfoComponent>
                <CategoryComponent Name="Announcements" IsOpen="false"></CategoryComponent>
                <CategoryComponent Name="General Discussion" IsOpen="true">
                    <ChannelListComponent Last="false" Open="true" First="true" Name="General"></ChannelListComponent>
                    <ChannelListComponent Last="false" Open="false" First="false" Name="Off Topic"></ChannelListComponent>
                    <ChannelListComponent Last="false" Open="false" First="false" Name="Current Events"></ChannelListComponent>
                    <ChannelListComponent Last="false" Open="false" First="false" Name="Memes"></ChannelListComponent>
                    <ChannelListComponent Last="true" Open="false" First="false" Name="Spike's Code Corner"></ChannelListComponent>
                </CategoryComponent>
            </div>
            <div class="channel-and-topbar" id="mainwindow">
                <div class="topbar">
                </div>
                <div class="topline">
                </div>
                <!--
        Todo: Logic for multiple main windows.
        This will be fun.
    -->
                <!--
        Add dummy window so Jacob doesn't cry
    -->

                @if (ClientWindowManager.GetWindowCount() == 0)
                {
                    ClientWindowManager.AddWindow(new HomeWindow(0));
                }

                @if (ClientWindowManager.GetWindowCount() < 4)
                {
                    <div class="add-window-button" @onclick="@OnAddWindow">

                    </div>
                }

                <div id="window-man" class="window-grid">

                    @if (ClientWindowManager.GetWindowCount() == 1)
                    {
                        <MainWindowComponent Window="ClientWindowManager.GetWindow(0)" StyleClass="main-window-full"></MainWindowComponent>
                    }
                    else if (ClientWindowManager.GetWindowCount() == 2)
                    {
                        <MainWindowComponent Window="ClientWindowManager.GetWindow(0)" StyleClass="main-window-full"></MainWindowComponent>
                        <MainWindowComponent Window="ClientWindowManager.GetWindow(1)" StyleClass="main-window-full"></MainWindowComponent>
                    }
                    else if (ClientWindowManager.GetWindowCount() == 3)
                    {
                        <div id="window-col1" class="window-col">
                            <MainWindowComponent Window="ClientWindowManager.GetWindow(0)" StyleClass="main-window-full"></MainWindowComponent>
                        </div>
                        <div id="window-col2" class="window-col">
                            <MainWindowComponent Window="ClientWindowManager.GetWindow(1)" StyleClass="main-window"></MainWindowComponent>
                            <MainWindowComponent Window="ClientWindowManager.GetWindow(2)" StyleClass="main-window"></MainWindowComponent>
                        </div>
                    }
                    else if (ClientWindowManager.GetWindowCount() == 4)
                    {
                        <div id="window-col1" class="window-col">
                            <MainWindowComponent Window="ClientWindowManager.GetWindow(0)" StyleClass="main-window"></MainWindowComponent>
                            <MainWindowComponent Window="ClientWindowManager.GetWindow(1)" StyleClass="main-window"></MainWindowComponent>
                        </div>
                        <div id="window-col2" class="window-col">
                            <MainWindowComponent Window="ClientWindowManager.GetWindow(2)" StyleClass="main-window"></MainWindowComponent>
                            <MainWindowComponent Window="ClientWindowManager.GetWindow(3)" StyleClass="main-window"></MainWindowComponent>
                        </div>
                    }
                </div>

            </div>
        </div>
    </body>
}
else
{
    <LoginComponent></LoginComponent>
}

@code{

    public ConcurrentBag<ClientPlanetUser> planetUserList = new ConcurrentBag<ClientPlanetUser>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        planetManager.OnPlanetChange += OnPlanetChange;
    }

    public void Dispose()
    {
        planetManager.OnPlanetChange -= OnPlanetChange;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        await SetupWindows();
    }

    private async Task SetupWindows()
    {
        await JS.InvokeVoidAsync("SizeEnable");
    }

    private async Task OnAddWindow()
    {
        if (ClientWindowManager.GetWindowCount() == 4)
        {
            return;
        }

        ClientWindowManager.AddWindow(new HomeWindow(ClientWindowManager.GetWindowCount() - 1));

        StateHasChanged();
    }

    public async Task OnPlanetChange()
    {
        if (planetManager.GetCurrent() == null) return;

        planetUserList.Clear();

        ClientPlanetUser self = await PlanetUserCache.GetPlanetUserAsync(ClientUserManager.User.Id, planetManager.GetCurrent().Id);

        planetUserList.Add(self);

        StateHasChanged();
    }
}